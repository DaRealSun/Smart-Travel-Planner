import { useDispatch } from "react-redux";import { useEffect } from "react";import {    onAuthStateChanged,    getRedirectResult, GoogleAuthProvider,} from "firebase/auth";import {auth} from "../utils/firebase";import { addUser, removeUser } from "../utils/userSlice";import appRouter from "../router/appRouter";const AuthListener = () => {    const dispatch = useDispatch();//Order of Execution: checkRedirectResult() is called before the onAuthStateChanged// listener is fully set up. This is the correct pattern to ensure getRedirectResult has a// chance to process the redirect and update Firebase's internal state before onAuthStateChanged// takes its initial snapshot.    useEffect(() => {        const checkRedirectResult = async () => {            try {                const result = await getRedirectResult(auth);                if (result) {                    // User just came back from Google redirect                    const credential = GoogleAuthProvider.credentialFromResult(result);                    const token = credential?.accessToken;                    const user = result.user;                    console.log("redirect result:", user, token);                }            } catch (error) {                console.error("redirect error:", error);            }        };        // main listener        const unsubscribe = onAuthStateChanged(auth, (user) => {            if (user) {                const { uid, email, displayName, photoURL } = user;                dispatch(addUser({ uid, email, displayName, photoURL }));                appRouter.navigate("/browse");            } else {                dispatch(removeUser());                appRouter.navigate("/");            }        });        checkRedirectResult()        return () => unsubscribe();    }, []);    return null;};export default AuthListener;